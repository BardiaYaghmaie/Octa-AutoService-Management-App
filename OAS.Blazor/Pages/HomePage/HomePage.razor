@page "/"
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using OAS.Application.Features.InvoiceFeatures.GetDailySellInvoices;
@using OAS.Blazor.Pages.Inventory
@using OAS.Blazor.Pages.Shared
@using OAS.Blazor.Pages.Invoices
@using Variant = Radzen.Variant
@inject DialogService DialogService
@inject MediatR.IMediator mediator;
@inject NavigationManager NavigationManager

@*@using System.Net.Http.Json*@
@*@inject HttpClient httpClient*@


<PageTitle>صفحه اصلی</PageTitle>

<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly">
        <RadzenButton Click=@OpenRegisterCustomer Text="ثبت مشتری" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Style="width: 300px;"/>
        <RadzenButton Click=@OpenVehicleEntrance Text="ورود ماشین" Icon="arrow_back" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Style="width: 300px;"/>
</RadzenRow>

<br />
<h5>فاکتور های روز</h5>

<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <RadzenDataGrid Data="@gridData" TItem="GetDailySellInvoices_DTO" AllowVirtualization="false" Style="height:400px"
                    AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                    AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="RowNumber" Title="ردیف" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="InvoiceCode" Title="شماره فاکتور" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="CustomerName" Title=" مشتری" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="VehicleName" Title="خودرو" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Title="عملیات">
                <Template Context="item">
                    <RadzenButton Click="() => OnEditInvoice(item.InvoiceId)" Icon="edit"></RadzenButton>
                    <RadzenButton Click="() => OnPrintInvoice(item.InvoiceId)" Icon="print"></RadzenButton>


                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

</RadzenRow>
<br/><br/>
<p>----------انباری----------</p><br/>
<p>---صفحه ها ها---</p>
<RadzenRow>
<RadzenButton Click=@OpenDeleteConfirmation ButtonStyle="ButtonStyle.Dark" Text="OpenDeleteConfirmation"/>
<RadzenButton Click=@OpenPaySellInvoice ButtonStyle="ButtonStyle.Secondary" Text="OpenPaySellInvoice" />
<RadzenButton Click=@(args => NavToOpenInvoiceEdit(Guid.NewGuid())) ButtonStyle="ButtonStyle.Warning" Text="NavToOpenInvoiceEdit"/>
<RadzenButton Click=@OpenEditInventoryItemDialog ButtonStyle="ButtonStyle.Info" Text="OpenEditInventoryItemDialog" />

</RadzenRow>
<p>---آیکون ها---</p>
<RadzenRow>
<RadzenButton Icon="print"></RadzenButton>
<RadzenButton Icon="edit"></RadzenButton>
<RadzenButton Icon="backspace"></RadzenButton>
</RadzenRow>

@code {
    #region Internet Connection

    private bool IsInternetConnected { get; set; } = true;

    // Check internet connection status
    private async Task CheckInternetConnection()
    {
        IsInternetConnected = await JSRuntime.InvokeAsync<bool>("checkInternetConnection");
    }

    #endregion
    private void OnPrintInvoice(Guid invoiceId)
    {
        NavigationManager.NavigateTo($"/printInvoice/{invoiceId}");
    }
    private void OnEditInvoice(Guid invoiceId)
    {
        NavToOpenInvoiceEdit(invoiceId);
    }
    public async Task OpenRegisterCustomer()
    {
        await DialogService.OpenAsync<RegisterCustomerDialog>("ثبت مشتری",
            new Dictionary<string, object>(),
            new DialogOptions()
                {
                    Width = "990px",
                    Height = "522px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }
    public async Task OpenVehicleEntrance()
    {
        await DialogService.OpenAsync<VehicleEntranceDialog>("ورود خودرو",
            new Dictionary<string, object>()
                {
                {"RefreshGridData",RefreshGridData }
                },

            new DialogOptions()
                {
                    Width = "550px",
                    Height = "260px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }

    string InvoiceCode = "39204";
    public async Task OpenDeleteConfirmation()
    {
        await DialogService.OpenAsync<InvoiceDeleteConfirmationDialog>("حذف فاکتور",
            new Dictionary<string, object>() { { "InvoiceCode", InvoiceCode } },

    new DialogOptions()
        {
            Width = "550px",
            Height = "260px",
            Draggable = false,
            AutoFocusFirstElement = false,
            CloseDialogOnOverlayClick = true
        });

    }
    public async Task OpenEditInventoryItemDialog()
    {
        await DialogService.OpenAsync<EditInventoryItemDialog>("ویرایش کالا",
            new Dictionary<string, object>() {  },

            new DialogOptions()
            {
                Width = "850px",
                Height = "360px",
                Draggable = false,
                AutoFocusFirstElement = false,
                CloseDialogOnOverlayClick = true
            });

    }
    public async Task OpenPaySellInvoice()
    {
        await DialogService.OpenAsync<PaySellInvoiceDialog>("پرداخت فاکتور ",
            new Dictionary<string, object>() { },

            new DialogOptions()
                {
                    Width = "700px",
                    Height = "500px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }

    private string testInvoiceCode { get; set; } = "0000";
    //private void NavToOpenInvoiceEdit(string invoiceCode)
    //{
    //    NavigationManager.NavigateTo($"/OpenInvoiceEditPage/{invoiceCode}");
    //}
    private void NavToOpenInvoiceEdit(Guid  invoiceId)
    {
        NavigationManager.NavigateTo($"/OpenInvoiceEditPage/{invoiceId}");
    }



    private void OnClick(string text)
    {
        //
    }

    private List<GetDailySellInvoices_DTO> gridData = new();

    private async Task RefreshGridData()
    {
        var request = new GetDailySellInvoicesRequest();
        var response = await mediator.Send(request);
        gridData = response.Data;
    }
    protected override async Task OnInitializedAsync()
    {
        //await CheckInternetConnection();

        if (!IsInternetConnected)
        {
            await DialogService.OpenAsync<InternetConnectionError>("اتصال اینترنت ",
                new Dictionary<string, object>() { },

                new DialogOptions()
                {
                    Width = "500px",
                    Height = "500px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });
            
        }
        
        await RefreshGridData();
    }

    
}