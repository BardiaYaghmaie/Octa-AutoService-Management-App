@page "/inventory"
@using OAS.Blazor.Models

@inject NavigationManager NavigationManager
@inject DialogService DialogService

<MudRTLProvider RightToLeft="true">

    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly">
        <RadzenButton Click=@(args => NavigationManager.NavigateTo("/purchase/inventoryitem")) Text="خرید کالا" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Style="width: 300px;" />
        <RadzenButton Click="OpenEditInventoryItemDialog" Text="ویرایش کالا" Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Style="width: 300px;" />
    </RadzenRow>
    <br />
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceEvenly">
        <RadzenButton Click="OpenRegisterServiceDialog" Text="ثبت خدمت جدید" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Style="width: 300px;" />
        <RadzenButton Click="OpenEditServiceDialog" Text="ویرایش خدمت" Icon="edit" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" Style="width: 300px;" />
    </RadzenRow>
    <br />
    <RadzenRow>
        <RadzenText Text="لیست موجودی انبار" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" Style="font-family: Vazirmatn,serif" />
    </RadzenRow>
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenDataGrid Data="inventoryItems" TItem="InventoryItemDTO" AllowVirtualization="false" Style="height:700px"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                        AllowSorting="true" FilterMode="FilterMode.Simple" PageSize="20" AllowPaging="true">
            <Columns>
                <RadzenDataGridColumn TItem="InventoryItemDTO" Title="ردیف">
                    <Template Context="item">@item.RowNumber.ToString().En2Fa()</Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="InventoryItemDTO" Title="کد">
                    <Template Context="item">@item.Code.ToString().En2Fa()</Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="InventoryItemDTO" Property="Title" Title="عنوان " />
                <RadzenDataGridColumn TItem="InventoryItemDTO" Title="تعداد">
                    <Template Context="item">
                        @(item.Count.HasValue ? item.Count.Value.ToString().En2Fa() : "")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="InventoryItemDTO" Title="قیمت خرید">
                    <Template Context="item">
                        @(item.BuyPrice.HasValue ? item.BuyPrice.Value.ToString("#,##0").En2Fa().AppendRialIran() : "")
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="InventoryItemDTO" Title="قیمت فروش">
                    <Template Context="item">
                        @(item.SellPrice.HasValue ? item.SellPrice.Value.ToString("#,##0").En2Fa().AppendRialIran() : "")
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        
    </RadzenRow>
    <br />
    <RadzenRow>
        <RadzenText Text="لیست خدمات" TextAlign="TextAlign.Center" TextStyle="TextStyle.H5" Style="font-family: Vazirmatn,serif" />
    </RadzenRow>
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenDataGrid Data="services" TItem="ServiceDTO" AllowVirtualization="false" Style="height:300px"
                        AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                        AllowSorting="true">
            <Columns>
                <RadzenDataGridColumn TItem="ServiceDTO" Title="ردیف">
                    <Template Context="item">@item.RowNumber.ToString().En2Fa()</Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ServiceDTO" Title="کد">
                    <Template Context="item">@item.Code.ToString().En2Fa()</Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ServiceDTO" Property="Title" Title="عنوان" />
                <RadzenDataGridColumn TItem="ServiceDTO" Title="قیمت پایه">
                    <Template Context="item">
                        @item.Price.ToString("#,##0").En2Fa().AppendRialIran()
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenRow>
    <p>@error</p>
</MudRTLProvider>

@code {
    private string error = "";
    private void OnClick(string text)
    {
        //
    }
    List<InventoryItemDTO> inventoryItems;
    List<ServiceDTO> services;
    private async Task GetServicesGridData()
    {
        var request = new GetServicesRequest();
        var httpResponse = await httpRequestSender.SendAsync(request, "/GetServices", HttpMethod.Get);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در خواندن اطلاعات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<GetServicesResponse>(responseContent);
        services = response.ServiceDTOs;
    }
    private async Task GetInventoryItemsGridData()
    {
        var request = new GetInventoryItemsRequest();
        var httpResponse = await httpRequestSender.SendAsync(request, "/GetInventoryItems", HttpMethod.Get);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در خواندن اطلاعات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<GetInventoryItemsResponse>(responseContent);

        inventoryItems = response.InventoryItemDTOs;
    }
    protected override async Task OnInitializedAsync()
    {
        await GetInventoryItemsGridData();
        await GetServicesGridData();

    }
    private async Task OpenEditServiceDialog()
    {
        await DialogService.OpenAsync<EditServiceDialog>("ویرایش خدمت",
           new Dictionary<string, object>()
                           {
               { "RefreshServicesGridData",GetServicesGridData },
              { "Services",services}

                           },
           new Radzen.DialogOptions()
               {
                   Width = "600px",
                   Height = "250px",
                   Draggable = false,
                   AutoFocusFirstElement = false,
                   CloseDialogOnOverlayClick = true
               });

    }
    private async Task OpenRegisterServiceDialog()
    {
        await DialogService.OpenAsync<RegisterServiceDialog>("ثبت خدمت",
            new Dictionary<string, object>()
                        {
               { "RefreshServicesGridData",GetServicesGridData },
               { "RefreshInventoryItemsGridData",GetInventoryItemsGridData }
                        },
            new Radzen.DialogOptions()
                {
                    Width = "600px",
                    Height = "250px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }
    private async Task OpenEditInventoryItemDialog()
    {
        await DialogService.OpenAsync<EditInventoryItemDialog>("ویرایش کالا", new Dictionary<string, object>()
        {
               { "RefreshInventoryItemsGridData",GetInventoryItemsGridData }

        }, new Radzen.DialogOptions()
            {
                Width = "600px",
                Height = "450px",
                Draggable = false,
                AutoFocusFirstElement = false,
                CloseDialogOnOverlayClick = true
            });
    }
    
}

