
@inject Radzen.DialogService dialogService
<MudRTLProvider RightToLeft="true">
    <RadzenTemplateForm TItem="Model" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>

        <RadzenRow JustifyContent="JustifyContent.SpaceBetween">

            <RadzenColumn Size="5">
                <RadzenFormField Text="عنوان" Variant="Variant.Outlined">
                    <RadzenAutoComplete Name="ServiceName" @bind-Value=@model.ServiceName Data=@Services TextProperty="Title" Style="width: 13rem" />
                    <RadzenRequiredValidator Component="ServiceName" Text="عنوان سرویس را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />


                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="5">
                <RadzenFormField Text="قیمت" Variant="Variant.Outlined">
                    <RadzenTextBox Name="ServicePrice" @bind-Value="model.ServicePrice" />
                    <RadzenRequiredValidator Component="ServicePrice" Text="قیمت سرویس  را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                </RadzenFormField>
            </RadzenColumn>

        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.Center" Style="margin-top:30px">
            <RadzenButton Click="@((args) => dialogService.Close(false))" ButtonStyle="ButtonStyle.Danger" Text="لغو" />
            <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Text="ثبت" />
        </RadzenRow>
        @error
    </RadzenTemplateForm>
</MudRTLProvider>

@code {
    [Parameter]
    public Func<Task> RefreshServicesGridData { get; set; }

    [Parameter]
    public List<ServiceDTO> Services { get; set; }

    class Model
    {
        public string ServiceName;
        public string ServicePrice;

    }
    private Model model = new();
    bool popup = false;
    void OnSubmit(Model model)
    {

        UpdateService();
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {

    }
    private string error = "";
    private async void UpdateService()
    {
        Guid ServiceId = Services.First(a => a.Title == model.ServiceName).Id;
        UpdateServiceRequest request = new(ServiceId, model.ServiceName, long.Parse(model.ServicePrice));
        var httpResponse = await httpRequestSender.SendAsync(request, "/UpdateService", HttpMethod.Put);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "عملیات با خطا مواجه شد";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateServiceResponse>(responseContent);
        await RefreshServicesGridData();
        dialogService.Close(true);
    }


}