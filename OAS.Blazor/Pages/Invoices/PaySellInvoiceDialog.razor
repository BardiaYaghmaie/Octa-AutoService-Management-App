@using OAS.Blazor.Models.InvoiceModels.AddSellInvoicePayment
@using OAS.Blazor.Models.InvoiceModels.GetInvoicePaymentInfo
@inject Radzen.DialogService dialogService

<MudRTLProvider RightToLeft="true">
    @if (Response == null)
    {
        <p>در حال بارگزاری ...</p>
    }
    else
    {

        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
            @if (Response.InvoiceType == InvoiceType.Buy)
            {
                <RadzenText Style="font-family: Vazirmatn, serif" TextStyle="TextStyle.H5">

                    فاکتور @Response.InvoiceCode -@Response.SellerName

                </RadzenText>
            }
            else
            {
                <RadzenText Style="font-family: Vazirmatn, serif" TextStyle="TextStyle.H5">

                    فاکتور @Response.InvoiceCode - @Response.VehicleName 

                </RadzenText>
            }
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.Left" AlignItems="AlignItems.Center">
            <RadzenButton Click="OnQuickPay" Text="پرداخت آنی" ButtonStyle="ButtonStyle.Warning" Style="width: 200px;margin-top:30px" />
        </RadzenRow>
        <br />
        <span class="text-danger">@error</span>
        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenFormField Text="مقدار کل" Variant="Variant.Outlined">
                <RadzenTextBox ReadOnly="true" Value="@Response.Total.ToString("#,##0").En2Fa()" />
            </RadzenFormField>
            <RadzenFormField Text="پرداخت شده" Variant="Variant.Outlined">
                <RadzenTextBox ReadOnly="true" Value="@Response.PaidAmoutSoFar.ToString("#,##0").En2Fa()" />
            </RadzenFormField>
            <RadzenFormField Text="مانده" Variant="Variant.Outlined">
                <RadzenTextBox ReadOnly="true" Value="@((Response.Total - Response.PaidAmoutSoFar).ToString("#,##0").En2Fa())" />
            </RadzenFormField>
        </RadzenRow>
        <br />

        <br />
        <MudDivider />
        <br />

        <br />
        <RadzenRow>
            <RadzenText Text="پرداخت" Style="font-family: Vazirmatn, serif" TextStyle="TextStyle.H6" />
        </RadzenRow>

        <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenTemplateForm TItem="AddPaymentModel" Data="addPaymentModel" Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
                <RadzenFormField Text="مقدار پرداخت" Variant="Variant.Outlined">
                    <RadzenTextBox Name="Amount" @bind-Value="addPaymentModel.Amount" />
                    <RadzenRequiredValidator Component="Amount" Text="مبلغ را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                </RadzenFormField>
                <RadzenFormField Text="شماره رهگیری" Variant="Variant.Outlined">
                    <RadzenTextBox @bind-Value="addPaymentModel.TrackCode" />                   
                </RadzenFormField>
            </RadzenTemplateForm>
                    <RadzenButton ButtonType="Radzen.ButtonType.Submit" Text="ثبت" ButtonStyle="ButtonStyle.Success" Style="width: 200px;margin-top:30px" />

        </RadzenRow>

        <br />

        <br />
        <MudDivider />
        <br />

        <br />
        <RadzenRow>
            <RadzenText Text="لیست پرداخت‌های تازه اضافه شده" Style="font-family: Vazirmatn, serif" TextStyle="TextStyle.H6" />
            <ul>
                @foreach (var item in newPayments)
                {
                    <li>@item.TrackCode - @item.PaidAmount.ToString("#,##0").En2Fa().AppendRialIran() |  @item.PaidDate.ToPersianDateString().En2Fa() - <span class="text-danger" @onclick="() => RemoveNewPayment(item)">X</span></li>
                }
            </ul>
        </RadzenRow>
        <RadzenRow>
            <RadzenText Text="لیست پرداخت‌های قبلی" Style="font-family: Vazirmatn, serif" TextStyle="TextStyle.H6" />
            <ul>
                @foreach (var item in Response.PaymentHistoryDTOs)
                {
                    <li>@item.TrackCode | @item.PaidAmount.ToString("#,##0").En2Fa().AppendRialIran() |  @item.PaidDate.ToPersianDateString().En2Fa()</li>
                }
            </ul>
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.Left">
            <RadzenButton Click="onFinalSubmit" Text="ثبت" ButtonStyle="ButtonStyle.Success" Style="width: 200px" />
        </RadzenRow>


    }





</MudRTLProvider>

@code {
    private bool popup = false;
    private void OnQuickPay()
    {
        addPaymentModel.Amount = (Response.Total - Response.PaidAmoutSoFar).ToString();
    }
    private async Task onFinalSubmit()
    {
        var request = new AddInvoicePaymentRequest(InvoiceId, newPayments.Select(a => new Tuple<string, long>(a.TrackCode, a.PaidAmount)).ToList());
        var httpResponse = await httpRequestSender.SendAsync(request, "/AddInvoicePayment", HttpMethod.Post);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در خواندن اطلاعات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<AddInvoicePaymentResponse>(responseContent);
        dialogService.Close();
    }
    private void RemoveNewPayment(GetInvoicePaymentInfo_InvoicePaymentHistoryDTO item)
    {
        newPayments.Remove(item);
    }
    private string error = "";
    class AddPaymentModel
    {
        public string TrackCode { get; set; }
        public string Amount { get; set; }
    }
    private List<GetInvoicePaymentInfo_InvoicePaymentHistoryDTO> newPayments = new();
    private AddPaymentModel addPaymentModel = new()
        {
            Amount = "",
            TrackCode = ""
        };
    private void OnInvalidSubmit()
    {
    }
    private void OnSubmit()
    {
        AddNewPayment();
    }
    private void AddNewPayment()
    {
        try
        {
            newPayments.Add(new()
                {
                    InvoiceId = InvoiceId,
                    InvoicePaymentId = Guid.NewGuid(),
                    PaidAmount = long.Parse(addPaymentModel.Amount),
                    TrackCode = addPaymentModel.TrackCode,
                    PaidDate = DateTime.Now
                });
            addPaymentModel.TrackCode = "";
            addPaymentModel.Amount = "";
        }
        catch (Exception e)
        {
            error = "خطا در انجام عملیات";
        }


    }
    [Parameter]
    public Guid InvoiceId { get; set; }
    public GetInvoicePaymentInfoResponse? Response { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var request = new GetInvoicePaymentInfoRequest(InvoiceId);
        var httpResponse = await httpRequestSender.SendAsync(request, "/GetInvoicePaymentInfo", HttpMethod.Get);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در خواندن اطلاعات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<GetInvoicePaymentInfoResponse>(responseContent);

        Response = response;
    }
}