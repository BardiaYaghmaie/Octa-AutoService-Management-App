@page "/"
@using AlignItems = Radzen.AlignItems
@using DialogOptions = Radzen.DialogOptions
@using DialogService = Radzen.DialogService
@using OAS.Application.Features.InvoiceFeatures.GetDailySellInvoices;
@using OAS.Blazor.Pages.Shared
@using OAS.Blazor.Pages.Invoices
@inject DialogService DialogService
@inject MediatR.IMediator mediator;
@inject NavigationManager NavigationManager
@*@using System.Net.Http.Json*@
@*@inject HttpClient httpClient*@


<PageTitle>صفحه اصلی</PageTitle>

<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <RadzenColumn>
        <RadzenButton Click=@OpenRegisterCustomer Text="ثبت مشتری" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
    </RadzenColumn>
    <RadzenColumn>
        <RadzenButton Click=@OpenVehicleEntrance Text="ورود ماشین" Icon="arrow_back" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Large" />
    </RadzenColumn>
</RadzenRow>

<br />
<h5>فاکتور های روز</h5>

<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
    <RadzenDataGrid Data="@gridData" TItem="GetDailySellInvoices_DTO" AllowVirtualization="false" Style="height:400px"
                    AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                    AllowSorting="true">
        <Columns>
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="RowNumber" Title="ردیف" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="InvoiceCode" Title="شماره فاکتور" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="CustomerName" Title=" مشتری" />
            <RadzenDataGridColumn TItem="GetDailySellInvoices_DTO" Property="VehicleName" Title="خودرو" />
            <RadzenDataGridColumn TItem="string" Property="Vehicle" Title="عملیات" />
        </Columns>
    </RadzenDataGrid>

</RadzenRow>
<RadzenButton Click=@OpenDeleteConfirmation ButtonStyle="ButtonStyle.Dark" />
<RadzenButton Click=@OpenPaySellInvoice ButtonStyle="ButtonStyle.Secondary" />
<RadzenButton Click=@(args => NavToOpenInvoiceEdit(testInvoiceCode)) ButtonStyle="ButtonStyle.Warning" />

@code {

    public async Task OpenRegisterCustomer()
    {
        await DialogService.OpenAsync<RegisterCustomerDialog>("ثبت مشتری",
            new Dictionary<string, object>(),
            new DialogOptions()
                {
                    Width = "950px",
                    Height = "512px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }
    public async Task OpenVehicleEntrance()
    {
        await DialogService.OpenAsync<VehicleEntranceDialog>("ورود خودرو",
            new Dictionary<string, object>()
                {
                {"RefreshGridData",RefreshGridData }
                },

            new DialogOptions()
                {
                    Width = "550px",
                    Height = "260px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }

    string InvoiceCode = "39204";
    public async Task OpenDeleteConfirmation()
    {
        await DialogService.OpenAsync<InvoiceDeleteConfirmationDialog>("حذف فاکتور",
            new Dictionary<string, object>() { { "InvoiceCode", InvoiceCode } },

    new DialogOptions()
        {
            Width = "550px",
            Height = "260px",
            Draggable = false,
            AutoFocusFirstElement = false,
            CloseDialogOnOverlayClick = true
        });

    }
    public async Task OpenPaySellInvoice()
    {
        await DialogService.OpenAsync<PaySellInvoiceDialog>("پرداخت فاکتور ",
            new Dictionary<string, object>() { },

            new DialogOptions()
                {
                    Width = "700px",
                    Height = "500px",
                    Draggable = false,
                    AutoFocusFirstElement = false,
                    CloseDialogOnOverlayClick = true
                });

    }

    private string testInvoiceCode { get; set; } = "0000";
    private void NavToOpenInvoiceEdit(string invoiceCode)
    {
        NavigationManager.NavigateTo($"/OpenInvoiceEditPage/{invoiceCode}");
    }


    private void OnClick(string text)
    {
        //
    }

    private List<GetDailySellInvoices_DTO> gridData = new();

    private async Task RefreshGridData()
    {
        var request = new GetDailySellInvoicesRequest();
        var response = await mediator.Send(request);
        gridData = response.Data;
    }
    protected override async Task OnInitializedAsync()
    {
        await RefreshGridData();
    }
}