@page "/purchase/inventoryitem"

@inject NavigationManager navigationManager;
<MudRTLProvider RightToLeft="true">
    <RadzenRow>
        <!-- sabte kalaye jadid-->
        <RadzenColumn Size="6">
            <RadzenRow><RadzenText Text="ثبت کالای جدید" TextStyle="TextStyle.H6" Style="font-family: Vazirmatn, serif" /></RadzenRow>
            <RadzenTemplateForm TItem="AddNewInventoryItemModel" Data="newInventoryItemModel" Submit="OnSubmitNewInventoryItem" InvalidSubmit="OnInvalidSubmitNewInventoryItem">

                <RadzenRow>
                    <RadzenFormField Text="عنوان" Variant="Variant.Outlined">
                        <RadzenTextBox Name="Title" @bind-Value="newInventoryItemModel.Title" />
                        <RadzenRequiredValidator Component="Title" Text="عنوان کالا را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                    <RadzenButton Text="ثبت" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Style="width: 180px" />
                </RadzenRow>
            </RadzenTemplateForm>
            <br /><br />
            <RadzenRow><RadzenText Text="ثبت فاکتور خرید کالا" TextStyle="TextStyle.H6" Style="font-family: Vazirmatn, serif" /></RadzenRow>
            <RadzenTemplateForm TItem="AddNewInvoiceModel" Data="addNewInvoiceModel" Submit="OnSubmitAddNewInvoice" InvalidSubmit="OnInvalidSubmitAddNewInvoice">
                <RadzenRow>
                    <RadzenFormField Text="شماره فاکتور" Variant="Variant.Outlined">
                        <RadzenTextBox Disabled="createInvoiceButtonDisabled" Name="InvoiceCode" @bind-Value="addNewInvoiceModel.Code" />
                        <RadzenRequiredValidator Component="InvoiceCode" Text="شماره فاکتور را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                    <RadzenFormField Text="فروشنده" Variant="Variant.Outlined">
                        <RadzenTextBox Disabled="createInvoiceButtonDisabled" Name="SellerName" @bind-Value="addNewInvoiceModel.Title" />
                        <RadzenRequiredValidator Component="SellerName" Text="فروشنده را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                </RadzenRow>
                <br />
                <RadzenRow>
                    <RadzenFormField Text="تاریخ صدور" Variant="Variant.Outlined">
                        <RadzenDatePicker Disabled="createInvoiceButtonDisabled" Name="InvoiceRegisterDate" @bind-Value="addNewInvoiceModel.RegisterDate" ShowTime="true" ShowSeconds="false" HoursStep="1.5" MinutesStep="5" SecondsStep="10" DateFormat="yyyy/MM/dd" />
                        <RadzenRequiredValidator Component="InvoiceRegisterDate" Text="تاریخ صدور را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                    <RadzenButton Text="افزودن" Disabled="createInvoiceButtonDisabled"
                                  ButtonType="Radzen.ButtonType.Submit"
                                  ButtonStyle="ButtonStyle.Success" Style="width: 180px" />
                </RadzenRow>
            </RadzenTemplateForm>

        </RadzenColumn>
        <!-- sabte aghlame kharid-->
        <RadzenColumn Size="6">
            <RadzenTemplateForm TItem="AddNewInvoiceInventoryItemModel" Data="addNewInvoiceInventoryItemModel" Submit="OnSubmitAddNewInvoiceInventoryItem" InvalidSubmit="OnInvalidSubmitAddNewInvoiceInventoryItem">
                <RadzenRow><RadzenText Text="ثبت اقلام خرید کالا" TextStyle="TextStyle.H6" Style="font-family: Vazirmatn, serif" /></RadzenRow>
                <RadzenRow>
                    <RadzenFormField Text="کد کالا" Variant="Variant.Outlined">

                        <RadzenAutoComplete ValueChanged="InventoryCodeItemAutoCompleteTextChanged" Name="Code" Data=@inventoryItems TextProperty="Code" Value="addNewInvoiceInventoryItemModel.Code" Style="width: 13rem" />
                        <RadzenRequiredValidator Component="Code" Text="کد کالا را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                    @*
                    <RadzenButton Click=@(args => OnClick("Primary icon button")) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Variant="Variant.Outlined" />*@
                    <RadzenFormField Text="عنوان" Variant="Variant.Outlined">

                        <RadzenAutoComplete ValueChanged="InventoryItemNameAutoCompleteTextChanged" Name="Title" Data=@inventoryItems TextProperty="Title" Value="addNewInvoiceInventoryItemModel.Title" Style="width: 13rem" />
                        <RadzenRequiredValidator Component="Title" Text="عنوان کالا را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                </RadzenRow>
                <br />
                <RadzenRow>
                    <RadzenFormField Text="قیمت خرید" Variant="Variant.Outlined">
                        <RadzenTextBox Name="BuyPrice" @bind-Value="@addNewInvoiceInventoryItemModel.BuyPrice" />
                        <RadzenRequiredValidator Component="BuyPrice" Text="قیمت خرید را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                    <RadzenFormField Text="قیمت فروش" Variant="Variant.Outlined">
                        <RadzenTextBox Name="SellPrice" @bind-Value="@addNewInvoiceInventoryItemModel.SellPrice" />
                        <RadzenRequiredValidator Component="SellPrice" Text="قیمت فروش را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>
                </RadzenRow>
                <br />

                <RadzenRow>
                    <RadzenFormField Text="تعداد موجود" Variant="Variant.Outlined">
                        <RadzenTextBox ReadOnly="true" Name="CurrentCount" @bind-Value="@addNewInvoiceInventoryItemModel.CurrentCount" Disabled="true" />
                        @*<RadzenRequiredValidator Component="CurrentCount" Text="تعداد موجود را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />*@
                    </RadzenFormField>
                    <RadzenFormField Text="تعداد خرید" Variant="Variant.Outlined">
                        <RadzenTextBox Name="Count" @bind-Value="@addNewInvoiceInventoryItemModel.Count" />
                        <RadzenRequiredValidator Component="Count" Text="تعداد خرید را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
                    </RadzenFormField>

                    @* <RadzenFormField Text="حداقل موجودی" Variant="Variant.Outlined"> *@
                    @*     <RadzenTextBox Name="Limit" @bind-Value="@addNewInvoiceInventoryItemModel.Limit" /> *@
                    @*     <RadzenRequiredValidator Component="Limit" Text="حداقل موجودی  را وارد کنید" Popup=@popup Style="position: absolute;top:40px" /> *@
                    @* </RadzenFormField> *@
                </RadzenRow>
                <RadzenRow JustifyContent="JustifyContent.End">
                    <RadzenButton Text="افزودن" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Style="width: 180px" />
                </RadzenRow>
            </RadzenTemplateForm>
        </RadzenColumn>
    </RadzenRow>

    <!-- Generated Invoice-->
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <RadzenText Style="font-family: Vazirmatn, serif" TextStyle="TextStyle.H5">
            <p class="text-danger" style="font-size:13px">@error</p>
            @*فاکتور ۹۲۹۱ - شرکت روغن گیران قرن*@
            فاکتور @addNewInvoiceModel.Code - @addNewInvoiceModel.Title

        </RadzenText>
    </RadzenRow>

    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center">
        <table class="table table">
            <thead>
                <tr>
                    <th>نام کالا</th>
                    <th>کد</th>
                    <th>تعداد</th>
                    <th>قمیت خرید</th>
                    <th>قیمت فروش</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in gridData)
                {
                    <tr>
                        <td>@item.Title</td>
                        <td>@item.Code.En2Fa()</td>
                        <td>@float.Parse(item.Count).ToString("").En2Fa()</td>
                        <td>@long.Parse(item.BuyPrice).ToString("#,##0").En2Fa().AppendRialIran()</td>
                        <td>@long.Parse(item.SellPrice).ToString("#,##0").En2Fa().AppendRialIran()</td>
                        @* Here in buy invoice, the sell price is not needed
                    and the important missing thing is "BuyCount" not the whole
                    count in inventory, but the specefic invoice buy items

                    for example there are 80 of A in inventory, if now there is 85
                    the buy count is 5
                    <td></td>
                    *@
                        <td class="text-danger" @onclick="() => RemoveInvoiceInventoryItem(item.InventoryItemId)">X</td>
                    </tr>
                }
            </tbody>

        </table>
        <RadzenButton Click="OnFinalClick" Text="ثبت نهایی" ButtonType="Radzen.ButtonType.Button" ButtonStyle="ButtonStyle.Success" Style="width: 180px" />
        <RadzenButton Text="انصراف" Click="OnClickCancel" ButtonType="Radzen.ButtonType.Button" ButtonStyle="ButtonStyle.Danger" Style="width: 180px" />
    </RadzenRow>


</MudRTLProvider>
@code {
    bool popup = false;
    string error = "";
    bool createInvoiceButtonDisabled = false;
    private List<InventoryItemDTO> inventoryItems = new();
    private AddNewInventoryItemModel newInventoryItemModel = new();
    private AddNewInvoiceInventoryItemModel addNewInvoiceInventoryItemModel = new();
    private AddNewInvoiceModel addNewInvoiceModel = new();
    private List<CreateBuyInvoice_InventoryItemDTO> invoiceInventoryItems = new();
    private List<GridDataModel> gridData = new();

    class AddNewInvoiceModel
    {
        public string Title { get; set; }
        public string Code { get; set; }
        public DateTime RegisterDate { get; set; }
    }


    class AddNewInventoryItemModel
    {
        public string Title { get; set; }
    }
    class AddNewInvoiceInventoryItemModel
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Code { get; set; }

        public string BuyPrice { get; set; }
        public string SellPrice { get; set; }
        public string Count { get; set; }
        public string Limit { get; set; }
        public string CurrentCount { get; set; } = "0";
    }
    class GridDataModel
    {
        public Guid InventoryItemId { get; set; }
        public string Title { get; set; }
        public string Code { get; set; }
        public string BuyPrice { get; set; }
        public string SellPrice { get; set; }
        public string Count { get; set; }

    }
    private void OnClickCancel()
    {
        navigationManager.NavigateTo("/inventory");
    }
    private async void OnFinalClick()
    {
        try
        {
            if (invoiceInventoryItems.Count == 0)
            {
                error = "لطفا قسمت ثبت اقلام خرید کالا را انجام دهید";
                return;
            }
            if (string.IsNullOrEmpty(addNewInvoiceModel.Code) || string.IsNullOrEmpty(addNewInvoiceModel.Title) || addNewInvoiceModel.RegisterDate == null)
            {
                error = "لطفا قسمت ثبت فاکتور را انجام دهید";
                return;

            }
            var request = new CreateBuyInvoiceRequest(invoiceInventoryItems, int.Parse(addNewInvoiceModel.Code), addNewInvoiceModel.Title, addNewInvoiceModel.RegisterDate);
            var httpResponse = await httpRequestSender.SendAsync(request, "/CreateBuyInvoice", HttpMethod.Post);
            if (!httpResponse.IsSuccessStatusCode)
            {
                error = "خطا در خواندن اطلاعات";
                return;
            }
            string responseContent = await httpResponse.Content.ReadAsStringAsync();
            var response = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateBuyInvoiceResponse>(responseContent);

            navigationManager.NavigateTo("/invoices");
        }
        catch (Exception e)
        {
            error = "خطا هنگام ثبت نهایی اطلاعات";
        }
    }
    private void OnSubmitAddNewInvoice()
    {
        createInvoiceButtonDisabled = true;
    }
    private void OnInvalidSubmitAddNewInvoice()
    {

    }
    private async Task OnSubmitNewInventoryItem()
    {
        await AddNewInventoryItem();
    }
    private void InventoryItemNameAutoCompleteTextChanged(string newValue)
    {
        addNewInvoiceInventoryItemModel.Title = newValue;
        var inventoryItem = inventoryItems.FirstOrDefault(a => a.Title == newValue);
        if (inventoryItem != null)
        {
            addNewInvoiceInventoryItemModel.Id = inventoryItem.Id;
            addNewInvoiceInventoryItemModel.Code = inventoryItem.Code;
            addNewInvoiceInventoryItemModel.BuyPrice = inventoryItem.BuyPrice.ToString();
            addNewInvoiceInventoryItemModel.SellPrice = inventoryItem.SellPrice.ToString();
            addNewInvoiceInventoryItemModel.CurrentCount = inventoryItem.Count.ToString();
            addNewInvoiceInventoryItemModel.Count = "";
            addNewInvoiceInventoryItemModel.Limit = inventoryItem.Limit.ToString();
        }
        else
        {
            addNewInvoiceInventoryItemModel.Id = Guid.Empty;

            addNewInvoiceInventoryItemModel.Code = "";
            addNewInvoiceInventoryItemModel.BuyPrice = "";
            addNewInvoiceInventoryItemModel.SellPrice = "";
            addNewInvoiceInventoryItemModel.CurrentCount = "";
            addNewInvoiceInventoryItemModel.Count = "";
            addNewInvoiceInventoryItemModel.Limit = "";
        }

    }
    private void InventoryCodeItemAutoCompleteTextChanged(string newValue)
    {
        addNewInvoiceInventoryItemModel.Code = newValue;
        var inventoryItem = inventoryItems.FirstOrDefault(a => a.Code == newValue);
        if (inventoryItem != null)
        {
            addNewInvoiceInventoryItemModel.Id = inventoryItem.Id;

            addNewInvoiceInventoryItemModel.Title = inventoryItem.Title;
            addNewInvoiceInventoryItemModel.BuyPrice = inventoryItem.BuyPrice.ToString();
            addNewInvoiceInventoryItemModel.SellPrice = inventoryItem.SellPrice.ToString();
            addNewInvoiceInventoryItemModel.CurrentCount = inventoryItem.Count.ToString();
            addNewInvoiceInventoryItemModel.Count = "0";
            addNewInvoiceInventoryItemModel.Limit = inventoryItem.Limit.ToString();

        }
        else
        {
            addNewInvoiceInventoryItemModel.Id = Guid.Empty;

            addNewInvoiceInventoryItemModel.Title = "";
            addNewInvoiceInventoryItemModel.BuyPrice = "";
            addNewInvoiceInventoryItemModel.SellPrice = "";
            addNewInvoiceInventoryItemModel.CurrentCount = "";
            addNewInvoiceInventoryItemModel.Count = "";
            addNewInvoiceInventoryItemModel.Limit = "";
        }
    }



    private async Task FetchInventoryData()
    {
        var request = new GetInventoryItemsRequest();
        var httpResponse = await httpRequestSender.SendAsync(request, "/GetInventoryItems", HttpMethod.Get);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در خواندن اطلاعات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<GetInventoryItemsResponse>(responseContent);
        inventoryItems = response.InventoryItemDTOs;
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchInventoryData();
        }
        catch (Exception e)
        {
            error = "خطا هنگام خواندن اطلاعات";
        }
    }
    private async Task OnInvalidSubmitNewInventoryItem()
    {

    }
    private async Task OnSubmitAddNewInvoiceInventoryItem()
    {
        AddInvoiceInventoryItem();
    }
    private async Task OnInvalidSubmitAddNewInvoiceInventoryItem()
    {

    }
    private void OnClick(string x)
    {

    }

    private void AddInvoiceInventoryItem()
    {
        try
        {
            if (invoiceInventoryItems.Any(a => a.Id == addNewInvoiceInventoryItemModel.Id))
            {
                error = "لطفا کالای تکراری ثبت نکنید";
                return;
            }
            CreateBuyInvoice_InventoryItemDTO dto = new(addNewInvoiceInventoryItemModel.Id, long.Parse(addNewInvoiceInventoryItemModel.BuyPrice), long.Parse(addNewInvoiceInventoryItemModel.SellPrice), float.Parse(addNewInvoiceInventoryItemModel.Count), 0);
            invoiceInventoryItems.Add(dto);
            gridData.Add(new GridDataModel()
                {
                    InventoryItemId = addNewInvoiceInventoryItemModel.Id,
                    Title = addNewInvoiceInventoryItemModel.Title,
                    Code = addNewInvoiceInventoryItemModel.Code,
                    BuyPrice = addNewInvoiceInventoryItemModel.BuyPrice,
                    SellPrice = addNewInvoiceInventoryItemModel.SellPrice,
                    Count = addNewInvoiceInventoryItemModel.Count
                });
            error = "";
        }
        catch (Exception e)
        {
            error = "لطفا کالای تکراری ثبت نکنید";
        }
    }
    private async Task AddNewInventoryItem()
    {
        var request = new AddInventoryItemRequest(newInventoryItemModel.Title);
        var httpResponse = await httpRequestSender.SendAsync(request, "/AddInventoryItem", HttpMethod.Post);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در حین انجام عملیات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<AddInventoryItemResponse>(responseContent);

        newInventoryItemModel.Title = "";
        await FetchInventoryData();
    }
    private void RemoveInvoiceInventoryItem(Guid inventoryItemId)
    {
        try
        {
            invoiceInventoryItems.Remove(invoiceInventoryItems.First(b => b.Id == inventoryItemId));
            gridData.Remove(gridData.First(b => b.InventoryItemId == inventoryItemId));
        }
        catch (Exception)
        {
            error = "خطا در حین انجام عملیات";
        }
    }
}