@inject Radzen.DialogService dialogService
<MudRTLProvider RightToLeft="true">
    <RadzenRow>
        <RadzenFormField Text="کد اشتراک خودرو" Variant="Variant.Outlined">
            <RadzenTextBox @bind-Value="@VehicleCode" />
        </RadzenFormField>
    </RadzenRow>
    <br />
    <RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenButton Text="ثبت فاکتور" Click="CreateSellInvoice" ButtonStyle="ButtonStyle.Success" Style="width: 200px" />
        <RadzenButton Text="ثبت فاکتور متفرقه" Click="CreateMiscellaneousSellInvoice" ButtonStyle="ButtonStyle.Info" Variant="Variant.Outlined" Style="width: 180px" />
    </RadzenRow>
    <p class="text-danger">@error</p>
</MudRTLProvider>
@code {
    [Parameter]
    public Func<Task> RefreshGridData { get; set; }
    private async Task CreateMiscellaneousSellInvoice()
    {
        var request = new CreateMiscellaneousSellInvoiceRequest();
        var httpResponse = await httpRequestSender.SendAsync(request, "/CreateMiscellaneousSellInvoice", HttpMethod.Post);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در ساخت فاکتور متفرقه";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateMiscellaneousSellInvoiceResponse>(responseContent);
        await RefreshGridData();
        dialogService.Close();
    }
    public string VehicleCode { get; set; }
    private List<GetVehiclesMinimal_DTO> vehicles = new();
    private string error = "";
    protected override async Task OnInitializedAsync()
    {
        var request = new GetVehiclesMinimalRequest();
        var httpResponse = await httpRequestSender.SendAsync(request, "/GetVehiclesMinimal", HttpMethod.Get);
        if (!httpResponse.IsSuccessStatusCode)
        {
            error = "خطا در خواندن اطلاعات";
            return;
        }
        string responseContent = await httpResponse.Content.ReadAsStringAsync();
        var response = Newtonsoft.Json.JsonConvert.DeserializeObject<GetVehiclesMinimalResponse>(responseContent);
        vehicles = response.Data;
    }
    private async Task CreateSellInvoice()
    {
        try
        {
            Guid vehicleId = vehicles.First(a => a.Code == int.Parse(VehicleCode)).Id;
            var request = new CreateSellInvoiceRequest(vehicleId);
            var httpResponse = await httpRequestSender.SendAsync(request, "/CreateSellInvoice", HttpMethod.Post);
            if (!httpResponse.IsSuccessStatusCode)
            {
                error = "خطا در خواندن اطلاعات";
                return;
            }
            string responseContent = await httpResponse.Content.ReadAsStringAsync();
            var response = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateSellInvoiceResponse>(responseContent);

            error = "";
            await RefreshGridData();
            dialogService.Close(true);

        }
        catch (ArgumentNullException e)
        {
            error = "کد خودرو وارد شده نامعتبر است";
        }
        catch (InvalidOperationException e)
        {
            error = "کد خودرو وارد شده نامعتبر است";
        }
        catch (FormatException e)
        {
            error = "کد خودرو وارد شده نامعتبر است";
        }
    }
}