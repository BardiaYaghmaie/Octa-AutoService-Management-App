@inject Radzen.DialogService dialogService
@inject IMediator mediator;
@inject NavigationManager navigationManager;
@inject Radzen.DialogService dialogService

<MudRTLProvider RightToLeft="true">
    <RadzenTemplateForm TItem="EditInvoiceInventoryItemModel" Data="editInvoiceInventoryItemModel" Submit="OnSubmit" InvalidSubmit="OnInvalidSubmit">
        <RadzenRow><RadzenText Text="ثبت اقلام خرید کالا" TextStyle="TextStyle.H6" Style="font-family: Vazirmatn, serif" /></RadzenRow>
        <p class="text-danger">@error</p>
        <RadzenRow>
            <RadzenFormField Text="کد کالا" Variant="Variant.Outlined">

                <RadzenAutoComplete ValueChanged="InventoryCodeItemAutoCompleteTextChanged" Name="Code" Data=@inventoryItems TextProperty="Code" Value="editInvoiceInventoryItemModel.Code" Style="width: 13rem" />
                <RadzenRequiredValidator Component="Code" Text="کد کالا را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
            </RadzenFormField>
            @*
            <RadzenButton Click=@(args => OnClick("Primary icon button")) Icon="add_circle_outline" ButtonStyle="ButtonStyle.Success" Variant="Variant.Outlined" />*@
            <RadzenFormField Text="عنوان" Variant="Variant.Outlined">

                <RadzenAutoComplete ValueChanged="InventoryItemNameAutoCompleteTextChanged" Name="Title" Data=@inventoryItems TextProperty="Title" Value="editInvoiceInventoryItemModel.Title" Style="width: 13rem" />
                <RadzenRequiredValidator Component="Title" Text="عنوان کالا را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
            </RadzenFormField>
        </RadzenRow>
        <br />
        <RadzenRow>
            <RadzenFormField Text="قیمت خرید" Variant="Variant.Outlined">
                <RadzenTextBox Name="BuyPrice" @bind-Value="@editInvoiceInventoryItemModel.BuyPrice" />
                <RadzenRequiredValidator Component="BuyPrice" Text="قیمت خرید را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
            </RadzenFormField>
            <RadzenFormField Text="قیمت فروش" Variant="Variant.Outlined">
                <RadzenTextBox Name="SellPrice" @bind-Value="@editInvoiceInventoryItemModel.SellPrice" />
                <RadzenRequiredValidator Component="SellPrice" Text="قیمت فروش را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
            </RadzenFormField>
        </RadzenRow>
        <br />

        <RadzenRow>
            <RadzenFormField Text="تعداد موجود" Variant="Variant.Outlined">
                <RadzenTextBox Name="Count" @bind-Value="@editInvoiceInventoryItemModel.Count" />
                <RadzenRequiredValidator Component="Count" Text="تعداد موجود را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
            </RadzenFormField>


            <RadzenFormField Text="حداقل موجودی" Variant="Variant.Outlined">
                <RadzenTextBox Name="Limit" @bind-Value="@editInvoiceInventoryItemModel.Limit" />
                <RadzenRequiredValidator Component="Limit" Text="حداقل موجودی  را وارد کنید" Popup=@popup Style="position: absolute;top:40px" />
            </RadzenFormField>
        </RadzenRow>
        <RadzenRow JustifyContent="JustifyContent.End" class="mt-5">
            <RadzenButton Text="اعمال تغییرات" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Style="width: 180px" />
            <RadzenButton Text="انصراف" Click="OnClickCancel" ButtonStyle="ButtonStyle.Danger" Style="width: 180px" />
        </RadzenRow>
    </RadzenTemplateForm>
</MudRTLProvider>
@code {
    [Parameter]
    public Func<Task> RefreshInventoryItemsGridData { get; set; }
    class EditInvoiceInventoryItemModel
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Code { get; set; }

        public string BuyPrice { get; set; }
        public string SellPrice { get; set; }
        public string Count { get; set; }
        public string Limit { get; set; }
    }
    private bool popup = false;
    private string error = "";
    EditInvoiceInventoryItemModel editInvoiceInventoryItemModel = new();
    private List<InventoryItemDTO> inventoryItems = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await FetchInventoryData();
        }
        catch (Exception e)
        {
            error = "خطا هنگام خواندن اطلاعات";
        }
    }
    private async Task OnInvalidSubmit()
    {

    }
    private async Task OnSubmit()
    {
        try
        {
            var request = new UpdateInventoryItemRequest(editInvoiceInventoryItemModel.Id, editInvoiceInventoryItemModel.Title,
       long.Parse(editInvoiceInventoryItemModel.BuyPrice), long.Parse(editInvoiceInventoryItemModel.SellPrice),
       float.Parse(editInvoiceInventoryItemModel.Count), float.Parse(editInvoiceInventoryItemModel.Limit));
            var response = await mediator.Send(request);
            await RefreshInventoryItemsGridData();
            dialogService.Close();
        }
        catch (Exception e)
        {
            error = "خطا در بروزرسانی اطلاعات";
        }

    }
    private void OnClickCancel()
    {
        navigationManager.NavigateTo("/inventory");
    }
    private async Task FetchInventoryData()
    {
        var request = new GetInventoryItemsRequest();
        var response = await mediator.Send(request);
        inventoryItems = response.InventoryItemDTOs;
    }
    private void InventoryItemNameAutoCompleteTextChanged(string newValue)
    {
        editInvoiceInventoryItemModel.Title = newValue;
        var inventoryItem = inventoryItems.FirstOrDefault(a => a.Title == newValue);
        if (inventoryItem != null)
        {
            editInvoiceInventoryItemModel.Id = inventoryItem.Id;
            editInvoiceInventoryItemModel.Code = inventoryItem.Code;
            editInvoiceInventoryItemModel.BuyPrice = inventoryItem.BuyPrice.ToString();
            editInvoiceInventoryItemModel.SellPrice = inventoryItem.SellPrice.ToString();
            editInvoiceInventoryItemModel.Count = inventoryItem.Count.ToString();
            editInvoiceInventoryItemModel.Limit = inventoryItem.Limit.ToString();
        }
        else
        {
            editInvoiceInventoryItemModel.Id = Guid.Empty;

            editInvoiceInventoryItemModel.Code = "";
            editInvoiceInventoryItemModel.BuyPrice = "";
            editInvoiceInventoryItemModel.SellPrice = "";
            editInvoiceInventoryItemModel.Count = "";
            editInvoiceInventoryItemModel.Limit = "";
        }

    }
    private void InventoryCodeItemAutoCompleteTextChanged(string newValue)
    {
        editInvoiceInventoryItemModel.Code = newValue;
        var inventoryItem = inventoryItems.FirstOrDefault(a => a.Code == newValue);
        if (inventoryItem != null)
        {
            editInvoiceInventoryItemModel.Id = inventoryItem.Id;

            editInvoiceInventoryItemModel.Title = inventoryItem.Title;
            editInvoiceInventoryItemModel.BuyPrice = inventoryItem.BuyPrice.ToString();
            editInvoiceInventoryItemModel.SellPrice = inventoryItem.SellPrice.ToString();
            editInvoiceInventoryItemModel.Count = inventoryItem.Count.ToString();
            editInvoiceInventoryItemModel.Limit = inventoryItem.Limit.ToString();

        }
        else
        {
            editInvoiceInventoryItemModel.Id = Guid.Empty;

            editInvoiceInventoryItemModel.Title = "";
            editInvoiceInventoryItemModel.BuyPrice = "";
            editInvoiceInventoryItemModel.SellPrice = "";
            editInvoiceInventoryItemModel.Count = "";
            editInvoiceInventoryItemModel.Limit = "";
        }
    }

}